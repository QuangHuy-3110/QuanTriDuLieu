-- HOCSINH

--STORE PROCEDURE

-- 1/ Từ tên tìm ra thông tin học sinh

DILIMITER $$
CREATE PROCEDURE
Get_InfoByName (
	IN p_TenHocSinh varchar(30)
) 
BEGIN
	IF EXISTS (SELECT * FROM HocSinh WHERE hs_hoTen = p_TenHocSinh)
	BEGIN
		SELECT *
		FROM HocSinh 
		WHERE hs_hoTen = p_TenHocSinh;
	END
END;
DILIMITER;

--2/ Từ mã học sinh tìm ra các lớp đã học ở các năm học và tìm ra người chủ nhiệm

DILIMITER $$
CREATE PROCEDURE
Get_InfoStudied_ByNumberOfStudent  (
	IN p_MaHocSinh varchar(10)
) 
BEGIN
	IF EXISTS (SELECT * FROM HocSinh WHERE Ma_hoc_sinh = p_MaHocSinh)
	BEGIN
		SELECT hs.maHS, hs.hoTen, l.tenLop, gv.gv_maGV, gv.hoTen
		FROM HocSinh hs, Lop l, ChuNhiem cn, GiaoVien gv
			INNER l JOIN hs.maLop = l.maLop
			INNER cn JOIN l.maLop = cn.maLop
			INNER gv JOIN cn.v_maGV = gv.v_maGV
		WHERE hs.maHS = p_MaHocSinh;
	END
END;

-- 3/ Từ mã học sinh tìm ra thông tin học sinh

DILIMITER $$
CREATE PROCEDURE
Get_InfoByNumberOfStudent (
	IN p_MaHocSinh varchar(10)
) 
BEGIN
	IF EXISTS (SELECT * FROM HocSinh WHERE maHS = p_MaHocSinh)
	BEGIN
		SELECT *
		FROM HocSinh 
		WHERE maHS = p_MaHocSinh;
	END
END;
DILIMITER;

--4/ Từ mã học sinh liệt kê các môn và điểm của từng môn ở năm học tùy chọn

DILIMITER $$
CREATE PROCEDURE
Get_ScoreByNumberOfStudent  (
	IN p_MaHocSinh varchar(10),
	IN p_NamHoc varchar(10)
) 
BEGIN
	IF EXISTS (Find_ClassNo (p_MaHocSinh, p_NamHoc))
	BEGIN
		CREATE TEMP TABLE MaLop AS Find_ClassNo (p_MaHocSinh, p_NamHoc);
	
		SELECT mh.maMonHoc, d.diemMieng, d.diem15Phut, d.diem1Tiet, d.diemThi,
		CalculateAvrageScore (d.diemMieng, d.diem15Phut, d.diem1Tiet, d.diemThi) Diem_TBMon
		FROM Diem d, MonHoc mh
			INNER mh JOIN d.maMonHoc = mh.maMonHoc		
		WHERE d.maHS = p_MaHocSinh
		AND d.maLop IN MaLop;
	END
END;
DILIMITER;

--5/ Từ mã học sinh và năm học tìm điểm trung bình và xếp loại của học đó

DILIMITER $$
CREATE PROCEDURE
Get_AvrgAndTypeOfStudent  (
	IN p_MaHocSinh varchar(10),
	IN p_NamHoc varchar(10)
) 
BEGIN
	IF EXISTS (Find_ClassNo (p_MaHocSinh, p_NamHoc))
	BEGIN
		DECLARE @Avrg float = CalculateAvrageScore_OfYear (p_MaHocSinh, p_NamHoc);
		CREATE TEMP TABLE ThanhTich (Diem_TBCN float, XepLoai varchar(10));

		UPDATE ThanhTich SET Diem_TBCN = @Avrg;

		IF @Avrg >= 9.0
		BEGIN		
			UPDATE ThanhTich SET XepLoai = "Xuất sắc";
		END;

		IF @Avrg >= 8.0 & @Avrg < 9.0
		BEGIN
			UPDATE ThanhTich SET XepLoai = "Giỏi";
		END;

		IF @Avrg >= 7.0 & @Avrg < 8.0
		BEGIN
			UPDATE ThanhTich SET XepLoai = "Khá";
		END;
	
		IF @Avrg >= 5.0 & @Avrg < 7.0
		BEGIN
			UPDATE ThanhTich SET XepLoai = "Trung bình";
		END;

		IF @Avrg >= 1.0 & @Avrg < 5.0
		BEGIN
			UPDATE ThanhTich SET XepLoai = "Yếu";
		END;
	
		SELECT *
		FROM ThanhTich;	
	END
END;
DILIMITER;

--PROCEDURE ứng dụng TRANSACTION thêm học sinh mới vào lớp

DILIMITER $$
CREATE PROCEDURE 
Insert_NewStudent (
	p_MaHocSinh varchar(10), 
	p_HoTen varchar(30),
	p_NgaySinh Date,
	p_DiaChi varchar(40),
	p_SDTPhuHuynh varchar(15),
	p_MaLop varchar(10)
)
BEGIN
	BEGIN TRANSACTION;
	DECLARE @MaLop varchar(10) = p_MaLop;
	IF EXISTS (SELECT * FROM Lop WHERE Ma_lop = p_MaLop)
	BEGIN
		INSERT INTO HocSinh (hs_maHS, hs_hoTen, hs_ngaySinh, hs_diaChi, hs_sdtPhuHuynh, hs_maLop)
		VALUES (p_MaHocSinh, p_HoTen, p_NgaySinh, p_DiaChi, p_SDTPhuHuynh, p_MaLop);
	END
	ELSE
	BEGIN
		PRINT 'Lớp không tồn tại!';
		ROLLBACK TRANSACTION;
	END
	COMMIT TRANSACTION;
END;
DILIMITER;

--Xóa các Store Function đã tạo bên trên
--DROP PROCERDURE IF EXISTS Get_InfoByName;
--DROP PROCERDURE IF EXISTS Get_InfoStudied_ByNumberOfStudent;
--DROP PROCERDURE IF EXISTS Get_InfoByNumberOfStudent;
--DROP PROCERDURE IF EXISTS Get_ScoreByNumberOfStudent;
--DROP PROCERDURE IF EXISTS Get_AvrgAndTypeOfStudent;
--DROP PROCERDURE IF EXISTS Insert_NewStudent;

--FUNCTION

--1/ Tính điểm trung bình môn

DILIMITER $$
CREATE FUNCTION CalculateAvrageScore (@DiemMieng float, @Diem15Phut float, @Diem1Tiet float, @DiemThi float)
RETURNS decimal (10, 2)
DETERMINISTIC
BEGIN
	DECLARE @Avrg float = 0;
	@Avrg = (@DiemMieng + @Diem15Phut + (@Diem1Tiet * 2) + (@DiemThi * 3))/7;
	RETURN @Avrg;
END;
DILIMITER;

--2/ Tính điểm trung bình cả năm khi biết mã học sinh và năm học

DILIMITER $$
CREATE FUNCTION CalculateAvrageScore_OfYear (@MaHocSinh varchar(10), @NamHoc varchar(10))
RETURNS decimal (10, 2)
DETERMINISTIC
BEGIN
	IF EXISTS (Find_ClassNo (@MaHocSinh, @NamHoc))
	BEGIN
		CREATE TEMP TABLE MaLop AS Find_ClassNo (@MaHocSinh, @NamHoc)
	
		DECLARE @Avrg DECIMAL(10,2) = 0;
		SELECT @Avrg = @Avrg + CalculateAvrageScore (Diem_mieng, Diem_15_phut, Diem_1_tiet, Diem_thi)
		FROM Diem 	
		WHERE hs_maHS = @MaHocSinh
		AND maLop IN MaLop;
		
		DECLARE @NoSubject int = 0;
		SELECT @NoSubject = COUNT(*)
		FROM MonHoc;

		RETURN @Avrg/@NoSubject;
	END
	ELSE
	BEGIN
		RETURN 0;
	END;
END;
DILIMITER;

--3/ Tìm mã lớp thông qua mã học sinh và năm học

DILIMITER $$
CREATE FUNCTION Find_ClassNo (@MaHocSinh varchar(10), @NamHoc varchar(10))
RETURNS TABLE(MaLop varchar(10))
DETERMINISTIC
BEGIN
	RETURN(
		SELECT hs_maLop
		FROM Hoc_sinh 
		WHERE hs_maHS = @MaHocSinh
		INTERSECT
		SELECT maLop
		FROM Lop 
		WHERE nienKhoa = @NamHoc;
	)
END;
DILIMITER;

--Xóa các Function đã tạo bên trên
--DROP FUNCTION IF EXISTS CalculateAvrageScore;
--DROP FUNCTION IF EXISTS CalculateAvrageScore_OfYear;
--DROP FUNCTION IF EXISTS Find_ClassNo;

--TRIGGER

--1/ Tạo trigger khi thêm 1 học sinh mới vào lớp nhưng mà lớp đầy

DILIMITER $$
CREATE TRIGGER
Check_Class_Capacity
BEFORE INSERT 
ON HocSinh
FOR EACH ROW
BEGIN
	DECLARE total_students INT;
	SELECT COUNT(*) INTO total_students
	FROM HocSinh
	WHERE hs_maLop = new.hs_maLop;

	IF total_students >= 
			(SELECT So_cho_toi_da 
			FROM PhongHoc
			WHERE maPhong = (SELECT maPhong 
					FROM PhongLop
					WHERE maLop = New.hs_maLop))
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Lớp đã đầy không thể thêm học sinh';
	END IF;
END;
DILIMITER;

--2/ Tạo trigger khi thêm 1 học sinh mới vào lớp nhưng mà bị bỏ sót giá trị

DILIMITER $$
CREATE TRIGGER
Check_Insert_ForgotValue
BEFORE INSERT 
ON HocSinh
FOR EACH ROW
BEGIN
	IF NEW.hs_maHS IS NULL OR NEW.hs_maHS = ""
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Mã học sinh không được để trống';
	END IF;

	IF NEW.hs_hoTen IS NULL OR NEW.hs_hoTen = ""
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Họ tên học sinh không được để trống';
	END IF;

	IF NEW.hs_ngaySinh IS NULL OR NEW.hs_ngaySinh = ""
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Ngày sinh không được để trống';
	END IF;

	IF NEW.hs_diaChi IS NULL OR NEW.hs_diaChi = ""
	THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Địa chỉ học sinh không được để trống';
	END IF;

END;
DILIMITER;

--Xóa các trigger đã tạo

--DROP TRIGGER IF EXISTS Check_Class_Capacity;
--DROP TRIGGER IF EXISTS Check_Insert_ForgotValue;

--INDEX
--1/ Tạo index cho bảng học sinh

CREATE INDEX
idx_HocSinh_MaHocSinh on
HocSinh(hs_maHS);

CREATE INDEX
idx_HocSinh_MaLop on
HocSinh(hs_maLop);

--Xóa các index đã tạo
--DROP INDEX idx_HocSinh_MaHocSinh ON HocSinh
--DROP INDEX idx_HocSinh_MaLop ON HocSinh
